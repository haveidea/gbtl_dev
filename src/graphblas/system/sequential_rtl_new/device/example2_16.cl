#ifdef DBG
  #define DBGPRINTF(...)      printf(__VA_ARGS__)
  //#define DBGPRINTF(...)    
#else
  #define DBGPRINTF(...)    
#endif
#define VX_LOCAL_SIZE     1024*128 // 128K * 32 bit = 512KB 
#define IA_LOCAL_SIZE     1024*128 // 128K * 32 bit = 512KB 
#define JA_LOCAL_SIZE     256 // 256 * 32 bit = 1KB 
#define MA_LOCAL_SIZE     256 // 256 * 32 bit = 1KB 

#define VECTOR_NUM        16
#define BURST_NUM        16 

typedef struct {
  float  value[16];
} dot_result_type;

channel dot_result_type kch_dot_result  __attribute((depth(32)));
channel float kch __attribute((depth(1024)));
   __constant float mask_table[256][16] = {
   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
   {1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
   {1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
   {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
   {0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
   {0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
   {0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
   {0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
   {0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
   {0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
   {0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
   {0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},
   {0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
   {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
   {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
   {0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
   {0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
   {0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
   {0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
   {0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
   {0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
   {0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0},
   {0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0},
   {0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
   {0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0},
   {0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},
   {0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0},
   {0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0},
   {0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0},
   {0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0},
   {0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0},
   {0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0},
   {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0},
   {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0},
   {0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0},
   {0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0},
   {0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0},
   {0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0},
   {0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0},
   {0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0},
   {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0},
   {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0},
   {0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0},
   {0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},
   {0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0},
   {0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0},
   {0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0},
   {0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0},
   {0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0},
   {0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0},
   {0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0},
   {0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0},
   {0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0},
   {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0},
   {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0},
   {0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0},
   {0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0},
   {0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0},
   {0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0},
   {0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0},
   {0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0},
   {0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0},
   {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0},
   {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0},
   {0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0},
   {0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0},
   {0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0},
   {0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0},
   {0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0},
   {0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
};

__kernel 
//__attribute((num_simd_work_items(VECTOR_NUM)))
void spmv_kernel(
      __global float* restrict VY,
      __global uint*  restrict IA,
      __global uint*  restrict JA,
      __global const float* restrict VX,
      __global float * restrict MA,
      uint xsize,
      uint ysize,
      uint nvals
){
  uint i,j;

   __local float __attribute__((numbanks(VECTOR_NUM * BURST_NUM),bankwidth(4))) VX_local[VX_LOCAL_SIZE];

   __local float __attribute__((bankwidth(4* VECTOR_NUM))) MA_local[MA_LOCAL_SIZE * BURST_NUM];
   __local uint  __attribute__((bankwidth(4* VECTOR_NUM))) JA_local[JA_LOCAL_SIZE * BURST_NUM];

      DBGPRINTF("I am here in the kernel\n");

    // preload whole VX
    for( int ii = 0; ii< xsize ; ii++){
          VX_local[ii] = VX[ ii];
    }

      DBGPRINTF("I am here in the kernel2\n");

    dot_result_type dot_result;
    for (int ii = 0; ii<nvals; ii += 256){
      // unroll for VECTOR_NUM * BURST_NUM
      // pragma unroll 256 
      for(int jj = 0; jj < 256; jj ++){
        JA_local[jj] = JA[ii];
        MA_local[jj] = MA[ii];
      }
      for (int kk = 0; kk <16; kk++){
      // pragma unroll 16
      for (int jj = 0; jj < 16; jj++){
        dot_result.value[jj] = MA_local[kk*16 + jj] * VX_local[JA_local[kk*16+jj]];
      }
      write_channel_intel(kch_dot_result, dot_result);
      }
    }
   DBGPRINTF("exit spmv kernel \n");

} //end main
__kernel 
//__attribute((num_simd_work_items(VECTOR_NUM)))
void compute_kernel(
      __global float* restrict VY,
      __global uint*  restrict IA,
      __global uint*  restrict JA,
      __global const float* restrict VX,
      __global float * restrict MA,
      uint xsize,
      uint ysize,
      uint nvals
){
  uint i,j;

   __local uint  __attribute__((numbanks(VECTOR_NUM),bankwidth(4))) IA_local[IA_LOCAL_SIZE];

   DBGPRINTF("I am here in the compute_kernel\n");

    // preload whole IA
    for( int ii = 0; ii< ysize+1 ; ii++){
          IA_local[ii] = IA[ ii];
    }

    uint  cur_IA_index = 0;
    float partial_result = 0;
    float cur_VY = 0;
    dot_result_type dot_data;
    uint  valid_data_num = 0;
    uint  consumed_data_num;
    uint fixed_num;
    uint   mtbl_index;

    for (int ii = 0; ii < ysize; ii++){
      DBGPRINTF("index is %d\n",ii);
      fixed_num = IA_local[ii+1] - IA_local[ii];
      consumed_data_num = 0;
      partial_result = 0;
      if(fixed_num == 0){
        cur_VY = 0;
      }
      else{
        while (fixed_num - consumed_data_num > valid_data_num){
          if(valid_data_num == 0){
              dot_data       = read_channel_intel(kch_dot_result);
              valid_data_num = 16;
          }
          else{
            mtbl_index = valid_data_num + (16-valid_data_num) * 16;
            partial_result += dot_data.value[0 ] * mask_table[mtbl_index][0 ] + dot_data.value[1 ] * mask_table[mtbl_index][1 ] +dot_data.value[2 ] * mask_table[mtbl_index][2 ] + dot_data.value[3 ] * mask_table[mtbl_index][3 ]  
                             +dot_data.value[4 ] * mask_table[mtbl_index][4 ] + dot_data.value[5 ] * mask_table[mtbl_index][5 ] +dot_data.value[6 ] * mask_table[mtbl_index][6 ] + dot_data.value[7 ] * mask_table[mtbl_index][7 ]  
                             +dot_data.value[8 ] * mask_table[mtbl_index][8 ] + dot_data.value[9 ] * mask_table[mtbl_index][9 ] +dot_data.value[10] * mask_table[mtbl_index][10] + dot_data.value[11] * mask_table[mtbl_index][11]  
                             +dot_data.value[12] * mask_table[mtbl_index][12] + dot_data.value[13] * mask_table[mtbl_index][13] +dot_data.value[14] * mask_table[mtbl_index][14] + dot_data.value[15] * mask_table[mtbl_index][15] ; 
             consumed_data_num += valid_data_num;
             valid_data_num = 0;
          }
        }
        mtbl_index = fixed_num - consumed_data_num + (16-valid_data_num)*16;

        partial_result += dot_data.value[0 ] * mask_table[mtbl_index][0 ] + dot_data.value[1 ] * mask_table[mtbl_index][1 ] +dot_data.value[2 ] * mask_table[mtbl_index][2 ] + dot_data.value[3 ] * mask_table[mtbl_index][3 ] 
                  +dot_data.value[4 ] * mask_table[mtbl_index][4 ] + dot_data.value[5 ] * mask_table[mtbl_index][5 ] +dot_data.value[6 ] * mask_table[mtbl_index][6 ] + dot_data.value[7 ] * mask_table[mtbl_index][7 ]  
                  +dot_data.value[8 ] * mask_table[mtbl_index][8 ] + dot_data.value[9 ] * mask_table[mtbl_index][9 ] +dot_data.value[10] * mask_table[mtbl_index][10] + dot_data.value[11] * mask_table[mtbl_index][11]  
                  +dot_data.value[12] * mask_table[mtbl_index][12] + dot_data.value[13] * mask_table[mtbl_index][13] +dot_data.value[14] * mask_table[mtbl_index][14] + dot_data.value[15] * mask_table[mtbl_index][15] ;
        valid_data_num -= fixed_num - consumed_data_num;
        cur_VY = partial_result;
        }
     }
     write_channel_intel(kch, cur_VY);
} //end main

__kernel 
void merge_kernel( __global float* restrict VY, uint NV){
  for(uint ii=0; ii< NV; ii++){
      VY[ii] = read_channel_intel(kch);
  }
}
