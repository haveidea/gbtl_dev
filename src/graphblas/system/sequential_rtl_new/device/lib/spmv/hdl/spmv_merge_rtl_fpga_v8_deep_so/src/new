//
//---------------------------------------------------------------------------
// provides rd, wr and q empty signals - use this only when q depth > 1 
//  
//  
//---------------------------------------------------------------------------
//
`include "definitions.vh"

module ptr_packed_qs_g1 #( 
   parameter
     BITS_ADDR_PACK = 4	       
     NUM_OF_Q = 2**BITS_ADDR_PACK,
     BITS_ADDR_EACH_Q = 2,
     DEPTH_EACH_Q = 2**BITS_ADDR_EACH_Q,
     WORD_WIDTH_PACK = BITS_ADDR_EACH_Q + BITS_ADDR_EACH_Q + BITS_ADDR_EACH_Q + 1,
     FPGA = 0) //0 means M20K or MLAB based storage, 1 means register based storage (use for asic)
  (input rst_b, clk, inc_rd_ptr, inc_wr_ptr,
   input rd_addr, wr_addr, 
 
   output q_empty,
   output [BITS_ADDR_EACH_Q - 1 : 0] rd_ptr_val, wr_ptr_val);

   logic [NUM_OF_Q - 1 : 0][BITS_ADDR_EACH_Q - 1 : 0] rd_ptr_storage;
   logic [NUM_OF_Q - 1 : 0][BITS_ADDR_EACH_Q - 1 : 0] wr_ptr_storage;
   logic [NUM_OF_Q - 1 : 0][BITS_ADDR_EACH_Q : 0] track_ptr_storage; 
 
wire [BITS_ADDR_EACH_Q - 1 : 0] cur_rd_ptr = rd_ptr_storage[rd_addr];
wire [BITS_ADDR_EACH_Q - 1 : 0] cur_wr_ptr = wr_ptr_storage[wr_addr];
wire [BITS_ADDR_EACH_Q : 0] cur_track_ptr_rd = track_ptr_storage[rd_addr];
wire [BITS_ADDR_EACH_Q : 0] cur_track_ptr_wr = track_ptr_storage[wr_addr];

wire [BITS_ADDR_EACH_Q - 1 : 0] cur_rd_ptr_plus1 = cur_rd_ptr + 1'b1;
wire [BITS_ADDR_EACH_Q - 1 : 0] cur_wr_ptr_plus1 = cur_wr_ptr + 1'b1;
    
wire [BITS_ADDR_EACH_Q : 0] cur_track_ptr_rd_minus1 = cur_track_ptr_rd - 1'b1;
wire [BITS_ADDR_EACH_Q : 0] cur_track_ptr_wr_plus1 = cur_track_ptr_wr + 1'b1;

always_ff @ (posedge clk) begin //make sure to integrate global_en now as input stage is also 0 initialized
   if(~rst_b) begin
      for (integer i = 0; i < NUM_OF_Q; i = i + 1) begin
	 rd_ptr_storage[i] <= '0;
	 wr_ptr_storage[i] <= '0;
	 track_ptr_storage[i] <= '0;
      end
   end
   else if(rd_en && wr_en && (rd_addr == wr_addr)) begin
      rd_ptr_storage[rd_addr] <= cur_rd_ptr_plus1;
      wr_ptr_storage[wr_addr] <= cur_wr_ptr_plus1;
   end
   else if(rd_en && ~wr_en ) begin
      rd_ptr_storage[rd_addr] <= cur_rd_ptr_plus1;
      track_ptr_storage[rd_addr] <= cur_track_ptr_rd_minus1;
   end
   else if(~rd_en && wr_en) begin
      wr_ptr_storage[wr_addr] <= cur_wr_ptr_plus1;
      track_ptr_storage[wr_addr] <= cur_track_ptr_wr_plus1;
   end
   else if(rd_en && wr_en && (rd_addr != wr_addr)) begin
      rd_ptr_storage[rd_addr] <= cur_rd_ptr_plus1;
      wr_ptr_storage[wr_addr] <= cur_wr_ptr_plus1;
   end

   
end 
   